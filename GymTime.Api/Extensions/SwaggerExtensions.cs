using System.Diagnostics.CodeAnalysis;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace GymTime.Api.Extensions;

[ExcludeFromCodeCoverage]
public static class SwaggerExtensions
{
    public static IServiceCollection AddSwaggerWithJwt(this IServiceCollection services)
    {
        services.AddEndpointsApiExplorer();
        services.AddSwaggerGen(options =>
        {
            options.SwaggerDoc("v1", new OpenApiInfo
            {
                Title = "GymTime API",
                Version = "v1",
                Description = "API for managing group class scheduling and student bookings in GymTime.\n\nSee DTO and controller XML comments for business rules and field descriptions."
            });

            // Include XML comments generated by the compiler for all assemblies in the solution
            var baseDir = AppContext.BaseDirectory;
            var assemblyNames = new[] { "GymTime.Api", "GymTime.Application", "GymTime.Domain" };
            foreach (var asmName in assemblyNames)
            {
                var xmlFile = $"{asmName}.xml";
                var xmlPath = Path.Combine(baseDir, xmlFile);
                if (File.Exists(xmlPath))
                {
                    options.IncludeXmlComments(xmlPath);
                }
            }

            // Swagger Bearer setup
            var securityScheme = new OpenApiSecurityScheme
            {
                Name = "Authorization",
                Type = SecuritySchemeType.Http,
                Scheme = "bearer",
                BearerFormat = "JWT",
                In = ParameterLocation.Header,
                Description = "Enter the token in the format: 'Bearer {token}'",
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            };

            options.AddSecurityDefinition("Bearer", securityScheme);

            options.AddSecurityRequirement(new OpenApiSecurityRequirement
            {
                {
                    new OpenApiSecurityScheme
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.SecurityScheme,
                            Id = "Bearer"
                        }
                    },
                    Array.Empty<string>()
                }
            });

            // Add tags and parameter descriptions
            options.DocumentFilter<AddControllerTagsDocumentFilter>();
            options.OperationFilter<AddDefaultResponseOperationFilter>();
        });

        return services;
    }

    public static WebApplication UseSwaggerInDevelopment(this WebApplication app)
    {
        if (app.Environment.IsDevelopment())
        {
            app.UseSwagger();
            app.UseSwaggerUI(options =>
            {
                options.SwaggerEndpoint("/swagger/v1/swagger.json", "GymTime API v1");
                options.RoutePrefix = string.Empty; // Swagger runs at https://localhost:5001/
            });
        }

        return app;
    }

    // DocumentFilter to add tags for each controller
    private class AddControllerTagsDocumentFilter : IDocumentFilter
    {
        public void Apply(OpenApiDocument swaggerDoc, DocumentFilterContext context)
        {
            foreach (var apiDescription in context.ApiDescriptions.GroupBy(a => a.ActionDescriptor.RouteValues["controller"]))
            {
                var name = apiDescription.Key ?? "Default";
                if (!swaggerDoc.Tags.Any(t => t.Name == name))
                {
                    swaggerDoc.Tags.Add(new OpenApiTag { Name = name, Description = $"Operations related to {name}." });
                }
            }
        }
    }

    // OperationFilter to add default responses or enhance parameter descriptions
    private class AddDefaultResponseOperationFilter : IOperationFilter
    {
        public void Apply(OpenApiOperation operation, OperationFilterContext context)
        {
            // Ensure500 response is documented
            if (!operation.Responses.ContainsKey("500"))
            {
                operation.Responses.Add("500", new OpenApiResponse { Description = "Internal server error" });
            }

            // Add parameter descriptions from ApiParameterDescription if missing
            if (operation.Parameters != null && context.ApiDescription.ParameterDescriptions != null)
            {
                foreach (var p in operation.Parameters)
                {
                    var desc = context.ApiDescription.ParameterDescriptions.FirstOrDefault(x => x.Name == p.Name);
                    if (desc != null && string.IsNullOrEmpty(p.Description))
                    {
                        p.Description = desc.ModelMetadata?.Description ?? desc.RouteInfo?.DefaultValue?.ToString();
                    }
                }
            }
        }
    }
}
